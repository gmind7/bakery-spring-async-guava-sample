description = "Spring Async Google Guava"

ext {
    gradleScriptDir = "${rootProject.projectDir}/gradle"
}

buildscript {
	repositories {
		maven { url "http://repo.spring.io/plugins-release" }		
		maven { url "http://repo.spring.io/plugins-milestone" }
		maven { url "http://repo.spring.io/plugins-snapshot" }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:bundlor-plugin:0.1.2'
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
	}
}

task wrapper(type: Wrapper) {
	description = "Generates gradlew[.bat] scripts"
	gradleVersion = "$gradleVersion"
	
	doLast() {
      def gradleOpts = "-XX:MaxPermSize=1024m -Xmx1024m"
      def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256m"
      File wrapperFile = file("gradlew")
      wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
                                                  "GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
      File wrapperBatFile = file("gradlew.bat")
      wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
                                                        "set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "maven"
apply plugin: 'spring-boot'
apply from: "${gradleScriptDir}/ide.gradle"
apply from: "${gradleScriptDir}/maven.gradle"

configurations {
    compile.extendsFrom providedCompile
    all {
        //Hack to let Gradle pickup latest SNAPSHOTS
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        exclude group: "commons-logging"
        exclude module: "slf4j-log4j12"
    }
}

project.sourceCompatibility = 1.7
project.targetCompatibility = 1.7

[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:none", "-g", "-encoding", "UTF-8"]

sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/libs-release" }
    maven { url "http://repo.spring.io/libs-milestone" }
    maven { url "http://repo.spring.io/libs-snapshot" }
}

dependencies {
	
	// Spring
	compile("org.springframework:spring-core:$springVersion") { force = true }
	compile("org.springframework:spring-beans:$springVersion") { force = true }
	compile("org.springframework:spring-context:$springVersion") { force = true }
	compile("org.springframework:spring-context-support:$springVersion") { force = true }
	compile("org.springframework:spring-aop:$springVersion") { force = true }
    compile("org.springframework:spring-aspects:$springVersion") { force = true }
	compile("org.springframework:spring-expression:$springVersion") { force = true }
	compile("org.springframework.boot:spring-boot-starter:$springBootVersion") { force = true }
	
	// AspectJ
	compile("org.aspectj:aspectjrt:$aspectjVersion") { force = true }
	compile("org.aspectj:aspectjweaver:$aspectjVersion") { force = true }
	compile "aopalliance:aopalliance:$aopallianceVersion"
	
	// Inject
	compile "javax.inject:javax.inject:1"
  
	// Logging
	runtime "ch.qos.logback:logback-classic:$logbackVersion"
	compile "org.slf4j:slf4j-api:$slf4jVersion"
	runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
  
	// Supporting libraries
	runtime "cglib:cglib-nodep:$cglibVersion"
	compile "com.google.guava:guava:$guavaVersion"
	providedCompile "org.projectlombok:lombok:$lombokVersion"
	
	// Testing
	testCompile "junit:junit:$junitVersion"
	testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
	testCompile "com.jayway.jsonpath:json-path:$jsonpathVersion"
	testCompile "org.mockito:mockito-core:$mockitoVersion"
	testCompile("org.springframework:spring-test:$springVersion") { force = true }
	testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion") { force = true }
}
